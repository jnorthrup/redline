Task Description:\n# Charter\n\nCharters establish inviolable principles that constrain and guide all code and behavior.\n\n## Declaration & Hierarchy\n\n1. Charter declarations may be established:\n   - In charter.md files\n   - In code comments/strings prefixed with "charter:"\n   - Case and punctuation variations are equivalent\n\n2. Hierarchical Structure:\n   - Parent charters in ../charter.md up to root are authoritative\n   - Local charters inherit and refine parent constraints\n   - Closer-to-root charters take precedence\n   - All levels of charter constraints must be satisfied\n\n## Immutability & Scope\n\n1. Charter Immutability:\n   - Charter declarations are permanent and inviolable\n   - Changes can only add refinements that respect existing constraints\n   - No charter principle can be removed or contradicted\n\n2. Universal Application:\n   - All code and behavior must satisfy charter constraints\n   - Charter may constrain or mandate any aspect:\n     - Coding styles and idioms\n     - Architectural patterns\n     - Behavioral requirements\n     - Implementation approaches\n\n3. Deterministic Interpretation:\n   - Charter must eliminate ambiguity\n   - Charter establishes clear boundaries\n   - All constraints are absolute goals\n\nThe purpose is to enable immutable agents to realize solutions within unambiguous charter-defined boundaries.\n\n\nGenerate a plan to complete the task in JSON format. The JSON should include a 'plan' array, where each element is an object with 'step' and 'agent' properties.